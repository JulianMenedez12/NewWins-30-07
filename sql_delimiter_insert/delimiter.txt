DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `darAdmin`(idUsuario INT) RETURNS int(11)
DETERMINISTIC
MODIFIES SQL DATA
BEGIN

    UPDATE usuarios_registrados SET es_admin = 1 WHERE id = idUsuario;

    RETURN ROW_COUNT();

END ;;
DELIMITER ;



DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `quitarAdmin`(idUsuario INT) RETURNS int(11)
DETERMINISTIC
MODIFIES SQL DATA
BEGIN

    UPDATE usuarios_registrados SET es_admin = 0 WHERE id = idUsuario;

    RETURN ROW_COUNT();

END ;;
DELIMITER ;



DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `EliminarUsuario`(
    IN userId INT
)
BEGIN
    DELETE FROM usuarios_registrados WHERE id = userId;
END ;;
DELIMITER ;




DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_agregar_valoracion`(IN p_articulo_id INT, IN p_usuario_id INT, IN p_valoracion ENUM('like', 'dislike'))
BEGIN

    DECLARE valoracionExistente ENUM('like', 'dislike');


    -- Verifica si ya existe una valoración

    SELECT valoracion INTO valoracionExistente

    FROM valoraciones_articulos

    WHERE articulo_id = p_articulo_id AND usuario_id = p_usuario_id;


    IF valoracionExistente IS NOT NULL THEN

        -- Actualiza la valoración existente

        UPDATE valoraciones_articulos

        SET valoracion = p_valoracion

        WHERE articulo_id = p_articulo_id AND usuario_id = p_usuario_id;

    ELSE

        -- Inserta una nueva valoración

        INSERT INTO valoraciones_articulos (articulo_id, usuario_id, valoracion)

        VALUES (p_articulo_id, p_usuario_id, p_valoracion);

    END IF;


    -- Llama al trigger para actualizar conteos

    CALL update_likes_dislikes();

END ;;
DELIMITER ;




DELIMITER ;;
 CREATE DEFINER=`root`@`localhost` TRIGGER log_user_activity

AFTER INSERT ON comentarios

FOR EACH ROW

BEGIN

    INSERT INTO user_activity_log (usuario, actividad, fecha_hora)

    VALUES (NEW.usuario, 'Nuevo comentario', NOW());

END ;;
DELIMITER ;
